/*
 * pin arducam mini  2M       esp32
 *
 * cs                           GPIO16 -RX2
 * mosi                         GPIO13
 * misc                         GPIO27
 * sck                          GPIO14
 * gnd                          gnd
 * vcc                          3.3v
 * sda                          GPIO04
 * scl                          GPIO05
 */

#include <Wire.h>
#include <SPI.h>
#include <ArduCAM.h>

const int CS = 16;

ArduCAM myCAM(OV2640, CS);

static const size_t bufferSize = 30096;
static uint8_t buffer[bufferSize] = {0xFF};
uint8_t temp = 0, temp_last = 0;
int i = 0;
bool is_header = false;


void setup() {
	// WiFi.begin("InternetHV-02", "1234567890");

	uint8_t vid, pid;
	uint8_t temp;
	pinMode(CS,OUTPUT);

	//I2C START SDA, SCL
	Wire.begin(4,5);
	//display.init();
	//display.flipScreenVertically();
	//display.setFont(ArialMT_Plain_10);
	Serial.begin(115200);
	Serial.println("OK");
// initialize SPI: SCK, MISO, MOSI, SS
	SPI.begin(14,27,13,16);
	SPI.setFrequency(8000000);     //4MHz

//Check if the ArduCAM SPI bus is OK
	myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
	temp = myCAM.read_reg(ARDUCHIP_TEST1);
	if (temp != 0x55) {
		Serial.println(F("SPI1 interface Error!"));
		while(1);
	}

//Check if the camera module type is OV2640
	myCAM.wrSensorReg8_8(0xff, 0x01);
	myCAM.rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
	myCAM.rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
	if ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 )))
		Serial.println(F("Can't find OV2640 module!"));
	else
		Serial.println(F("OV2640 detected."));


	//Change to JPEG capture mode and initialize the OV2640 module
	myCAM.set_format(JPEG);
	myCAM.InitCAM();
	Serial.println("OK");
	myCAM.OV2640_set_JPEG_size(OV2640_160x120);
	myCAM.clear_fifo_flag();
	Serial.println("OK");
	// Start the server
	delay(5000);

	//
	// server.on("/capture", HTTP_GET, serverCapture);
	// server.on("/stream", HTTP_GET, serverStream);
	// server.onNotFound(handleNotFound);
	// server.begin();
	// Serial.println("OK1");
	// Serial.println(F("Server started"));
	// Serial.println("OK2");
	uint32_t len  = myCAM.read_fifo_length();
	if (len >= MAX_FIFO_SIZE)     //8M
	{
		Serial.println(F("Over size."));
	}
	if (len == 0 )     //
	{

		Serial.println(F("Size is 0."));
	}
	myCAM.flush_fifo();
    myCAM.clear_fifo_flag();
    myCAM.start_capture();
	Serial.println("Start cap");
	while (!myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK));
	Serial.println("Cap done");
	myCAM.CS_LOW();
	myCAM.set_fifo_burst();
	i = 0;
	while ( len-- )
	{
		temp_last = temp;
		temp =  SPI.transfer(0x00);
		Serial.printf("0x%2x\n",temp);
        delay(200);
		//Read JPEG data from FIFO
		if ( (temp == 0xD9) && (temp_last == 0xFF) )         //If find the end ,break while,
		{
			buffer[i++] = temp;             //save the last  0XD9
			//Write the remain bytes in the buffer
			Serial.println("CATCH!!");
			is_header = false;
			i = 0;
			myCAM.CS_HIGH();
			break;
		}
		if (is_header == true)
		{
			//Write image data to buffer if not full
			if (i < bufferSize)
				buffer[i++] = temp;
			else
			{
				//Write bufferSize bytes image data to file
				Serial.println("CATCH!!");
				i = 0;
				buffer[i++] = temp;
			}
		}
		else if ((temp == 0xD8) & (temp_last == 0xFF))
		{
			is_header = true;
			buffer[i++] = temp_last;
			buffer[i++] = temp;
		}
	}
}
void loop() {
	// if (WiFi.status() == WL_CONNECTED) {
	// 	server.handleClient();
	//
	// }
}
